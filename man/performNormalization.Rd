% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/performNormalization.R
\name{performNormalization}
\alias{performNormalization}
\title{Perform Normalization on Enrichment Data}
\usage{
performNormalization(
  sc.data,
  enrichment.data = NULL,
  assay = "escape",
  gene.sets = NULL,
  make.positive = FALSE,
  scale.factor = NULL,
  groups = NULL
)
}
\arguments{
\item{sc.data}{Single‑cell object used to generate *raw* enrichment, or a
matrix of counts (cells × genes) when `enrichment.data`
is supplied.}

\item{enrichment.data}{Matrix with raw enrichment scores (cells × gene sets).
Required when `sc.data` is a plain matrix.}

\item{assay}{Name of the assay to read/write inside `sc.data` when it
is a Seurat / SCE object. Default is "escape".}

\item{gene.sets}{The gene‑set definitions originally used. Needed to count
expressed genes per set.}

\item{make.positive}{Logical; if `TRUE` shifts each column so its minimum is
zero.}

\item{scale.factor}{Optional numeric vector overriding gene‑count scaling
(length = #cells). Use when you want external per‑cell
normalization factors.}

\item{groups}{Chunk size (cells per block) when memory is limited.}
}
\value{
If `sc.data` is an object, the same object with a new assay
        "<assay>_normalized". Otherwise a matrix of normalized scores.
}
\description{
Scales each enrichment value by the **number of genes from the set that are
expressed** in that cell (non‑zero counts). Optionally shifts results into a
positive range and/or applies a natural‑log transform for compatibility with
log‑based differential tests.
}
\examples{
GS <- list(Bcells = c("MS4A1", "CD79B", "CD79A", "IGH1", "IGH2"),
           Tcells = c("CD3E", "CD3D", "CD3G", "CD7","CD8A"))
pbmc_small <- SeuratObject::pbmc_small
pbmc_small <- runEscape(pbmc_small, 
                        gene.sets = GS, 
                        min.size = NULL)
                        
pbmc_small <- performNormalization(pbmc_small, 
                                   assay = "escape", 
                                   gene.sets = GS)

}
